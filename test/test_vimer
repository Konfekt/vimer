#!/bin/sh

# Tests for list actions.

# The MIT License (MIT)
#
# Copyright (c) 2016 Susam Pal
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# When no arguments are specified to Vimer, a new Vim window is
# launched.
test_no_args()
{
    VIM_CMD="$TMAIN/mockvim"
    [ -z "$(main)" ] || return 1
    [ -z "$(main -t)" ] || return 1
    unset VIM_CMD
}


# When a file argument is specified, Vim tries to connect to a Vim
# server and edit the file.
test_one_file_arg()
{
    VIM_CMD="$TMAIN/mockvim"
    [ "$(main foo.txt)" = '"--remote-silent" "foo.txt"' ]
    unset VIM_CMD
}


# When multiple file arguments are specified, Vim tries to connect to a
# Vim server and edit the files.
test_two_file_args()
{
    VIM_CMD="$TMAIN/mockvim"
    [ "$(main foo.txt bar.txt)" = '"--remote-silent" "foo.txt" "bar.txt"' ]
    unset VIM_CMD
}


# Filenames with whitespace are passed correctly to Vim with the
# whitespace intact.
test_file_args_with_whitespace()
{
    VIM_CMD="$TMAIN/mockvim"
    [ "$(main "foo  bar.txt" "baz  qux.txt")" = \
      '"--remote-silent" "foo  bar.txt" "baz  qux.txt"' ]
    unset VIM_CMD
}


# With the -t/--tab option, each file should be opened in a new tab.
test_tab_option()
{
    VIM_CMD="$TMAIN/mockvim"
    for opt in -t --tab
    do
        [ "$(main $opt foo.txt)" = \
          '"--remote-tab-silent" "foo.txt"' ] || return 1
    done
    unset VIM_CMD
}


# With -s/--server option alone, i.e. without file arguments, Vim
# launches a new server with the specified server name.
test_server_option()
{
    VIM_CMD="$TMAIN/mockvim"
    for opt in -s --server
    do
        [ "$(main $opt name)" = '"--servername" "name"' ] || return 1
    done
    unset VIM_CMD
}


# With the -s/--server option and a file argument, Vim tries to connect
# to a Vim server with the specified servername and edit the file.
test_server_option_file_arg()
{
    VIM_CMD="$TMAIN/mockvim"
    for opt in -s --server
    do
        [ "$(main $opt name foo.txt)" = \
          '"--servername" "name" "--remote-silent" "foo.txt"' ] || return 1
    done
    unset VIM_CMD
}


# Server option must be followed by a server name.
test_no_server_name()
{
    main -s 2>&1 | grep -q '^.*: Argument missing after: "-s".$'
}


# Server name must be a non-empty string.
test_empty_server_name()
{
    main -s "" 2>&1 | grep -q '^.*: Non-empty string must follow "-s".$'
}




# With the -t and -s options only, i.e. without file arguments, Vim
# launcches a new server with the specified server name.
test_tab_server_options()
{
    VIM_CMD="$TMAIN/mockvim"
    [ "$(main -t -s name)" = '"--servername" "name"' ] || return 1
    [ "$(main -s name -t)" = '"--servername" "name"' ] || return 1
    unset VIM_CMD
}


# With the -t and -s options and a file argument, Vim tries to connect
# to a Vim server with the specified servername and edit the file.
test_tab_server_options_file_arg()
{
    VIM_CMD="$TMAIN/mockvim"
    [ "$(main -t -s name foo.txt)" = \
      '"--servername" "name" "--remote-tab-silent" "foo.txt"' ] || return 1
    [ "$(main -s name -t foo.txt)" = \
      '"--servername" "name" "--remote-tab-silent" "foo.txt"' ] || return 1
    unset VIM_CMD
}


# With the -n/--name option, the value of VIM_CMD is displayed.
test_name_option()
{
    VIM_CMD=foo
    for opt in -n --name
    do
        [ "$(main $opt)" = foo ] || return 1
    done
    unset VIM_CMD
}


# With the hyphen argument, i.e. '-', the text read via standard input
# is first written to a file and that file is edited.
test_hyphen_arg()
{
    VIM_CMD="$TMAIN/mockvim"

    echo hi | main - |
    grep -q '^"--remote-silent" "/tmp/vimer/_STDIN_' || return 1

    echo hi | main -t - |
    grep -q '^"--remote-tab-silent" "/tmp/vimer/_STDIN_' || return 1

    regex='^"--servername" "name" "--remote-silent" "/tmp/vimer/_STDIN_'
    echo hi | main -s name - | grep -q  "$regex" || return 1

    rm -rf "$TMP_DIR"
    unset VIM_CMD
}


# With the hyphen argument, i.e. '-', the text read via standard input
# is edited.
test_stdin_read()
{
    VIM_CMD="$TMAIN/mockcat"
    echo hello world | main - | grep -q "^hello world$" || return 1
    echo hello world | main -t - | grep -q "^hello world$" || return 1
    echo hello world | main -s name - | grep -q "^hello world$" || return 1
    rm -rf "$TMP_DIR"
    unset VIM_CMD
}


# While editing standard input, hyphen, i.e. '-', must be the only
# argument.
test_too_many_args_with_hyphen()
{
    main - foo 2>&1 | grep -q '^.*: Too many edit arguments: "foo".$'
}


# If the temporary directory cannot be created, an error occurs.
test_tmp_dir_failure()
{
    # Create a filename with the same name as $TMP_DIR. This would cause
    # the a directory creation with the same name to fail.
    rm -rf "$TMP_DIR"
    touch "$TMP_DIR"

    main - 2>&1 | grep -q "^.*: Cannot create temporary directory: $TMP_DIR\.$"
    rm "$TMP_DIR"
}


# Vimer ignores non-existent editors and uses an editor that exists.
test_find_vim()
{
    EDITORS=junk:$TMAIN/mockvim
    main -n | grep -q '/mockvim$'
}


# When Vimer cannot find an editor, an error occurs.
test_find_vim_failure()
{
    EDITORS=junk:junk
    main 2>&1 | grep -q '^.*: Cannot find GVim or MacVim\.$'
}


# Help output contains usage line.
test_help()
{
    for opt in -h --help
    do
        main $opt | head -n 1 | grep -q "^Usage:" || return 1
    done
}


# Version output contains version.
test_version()
{
    for opt in -v --version
    do
        main $opt | head -n 1 | grep -q "Vimer $VERSION" || return 1
    done
}
